{"ast":null,"code":"/**\n * --------------------------------------------------------------------------\n * CoreUI Utils (v2.0.1): rgbToHex.ts\n * Licensed under MIT (https://github.com/coreui/coreui-utils/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\nvar rgbToHex = function (color) {\n  if (typeof color === 'undefined') {\n    throw new TypeError('Hex color is not defined');\n  }\n  if (color === 'transparent') {\n    return '#00000000';\n  }\n  var rgb = color.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n  if (!rgb) {\n    throw new Error(\"\".concat(color, \" is not a valid rgb color\"));\n  }\n  var r = \"0\".concat(parseInt(rgb[1], 10).toString(16));\n  var g = \"0\".concat(parseInt(rgb[2], 10).toString(16));\n  var b = \"0\".concat(parseInt(rgb[3], 10).toString(16));\n  return \"#\".concat(r.slice(-2)).concat(g.slice(-2)).concat(b.slice(-2));\n};\nexport { rgbToHex as default };","map":{"version":3,"names":["rgbToHex","color","TypeError","rgb","match","Error","concat","r","parseInt","toString","g","b","slice"],"sources":["C:\\Users\\tnaru\\Desktop\\WebReceptai\\WebRecipes\\WebRecipesFE\\node_modules\\@coreui\\utils\\src\\rgbToHex.ts"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * CoreUI Utils (__COREUI_VERSION__): rgbToHex.ts\n * Licensed under MIT (https://github.com/coreui/coreui-utils/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst rgbToHex = (color: string) => {\n  if (typeof color === 'undefined') {\n    throw new TypeError('Hex color is not defined')\n  }\n\n  if (color === 'transparent') {\n    return '#00000000'\n  }\n\n  const rgb = color.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i)\n\n  if (!rgb) {\n    throw new Error(`${color} is not a valid rgb color`)\n  }\n\n  const r = `0${parseInt(rgb[1], 10).toString(16)}`\n  const g = `0${parseInt(rgb[2], 10).toString(16)}`\n  const b = `0${parseInt(rgb[3], 10).toString(16)}`\n\n  return `#${r.slice(-2)}${g.slice(-2)}${b.slice(-2)}`\n}\n\nexport default rgbToHex\n"],"mappings":"AAAA;;;;;AAKG;AAEG,IAAAA,QAAQ,GAAG,SAAAA,CAACC,KAAa;EAC7B,IAAI,OAAOA,KAAK,KAAK,WAAW,EAAE;IAChC,MAAM,IAAIC,SAAS,CAAC,0BAA0B,CAAC;EAChD;EAED,IAAID,KAAK,KAAK,aAAa,EAAE;IAC3B,OAAO,WAAW;EACnB;EAED,IAAME,GAAG,GAAGF,KAAK,CAACG,KAAK,CAAC,sEAAsE,CAAC;EAE/F,IAAI,CAACD,GAAG,EAAE;IACR,MAAM,IAAIE,KAAK,CAAC,GAAAC,MAAA,CAAGL,KAAK,8BAA2B,CAAC;EACrD;EAED,IAAMM,CAAC,GAAG,IAAAD,MAAA,CAAIE,QAAQ,CAACL,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAACM,QAAQ,CAAC,EAAE,CAAC,CAAE;EACjD,IAAMC,CAAC,GAAG,IAAAJ,MAAA,CAAIE,QAAQ,CAACL,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAACM,QAAQ,CAAC,EAAE,CAAC,CAAE;EACjD,IAAME,CAAC,GAAG,IAAAL,MAAA,CAAIE,QAAQ,CAACL,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAACM,QAAQ,CAAC,EAAE,CAAC,CAAE;EAEjD,OAAO,IAAAH,MAAA,CAAIC,CAAC,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAG,CAAAN,MAAA,CAAAI,CAAC,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,EAAAN,MAAA,CAAGK,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAE;AACtD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}