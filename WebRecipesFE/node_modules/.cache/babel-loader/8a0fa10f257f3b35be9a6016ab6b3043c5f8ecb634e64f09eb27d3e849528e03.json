{"ast":null,"code":"/**\n * --------------------------------------------------------------------------\n * CoreUI Utils (v2.0.1): hexToRgb.ts\n * Licensed under MIT (https://github.com/coreui/coreui-utils/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/* eslint-disable no-magic-numbers */\nvar hexToRgb = function (color) {\n  if (typeof color === 'undefined') {\n    throw new TypeError('Hex color is not defined');\n  }\n  color.match(/^#(?:[0-9a-f]{3}){1,2}$/i);\n  var r;\n  var g;\n  var b;\n  if (color.length === 7) {\n    r = parseInt(color.slice(1, 3), 16);\n    g = parseInt(color.slice(3, 5), 16);\n    b = parseInt(color.slice(5, 7), 16);\n  } else {\n    r = parseInt(color.slice(1, 2), 16);\n    g = parseInt(color.slice(2, 3), 16);\n    b = parseInt(color.slice(3, 5), 16);\n  }\n  return \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n};\nexport { hexToRgb as default };","map":{"version":3,"names":["hexToRgb","color","TypeError","match","r","g","b","length","parseInt","slice","concat"],"sources":["C:\\Users\\tnaru\\Desktop\\WebReceptai\\WebRecipes\\WebRecipesFE\\node_modules\\@coreui\\utils\\src\\hexToRgb.ts"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * CoreUI Utils (__COREUI_VERSION__): hexToRgb.ts\n * Licensed under MIT (https://github.com/coreui/coreui-utils/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/* eslint-disable no-magic-numbers */\nconst hexToRgb = (color: string) => {\n  if (typeof color === 'undefined') {\n    throw new TypeError('Hex color is not defined')\n  }\n\n  const hex = color.match(/^#(?:[0-9a-f]{3}){1,2}$/i)\n\n  if (!hex) {\n    // throw new Error(`${color} is not a valid hex color`)\n  }\n\n  let r\n  let g\n  let b\n\n  if (color.length === 7) {\n    r = parseInt(color.slice(1, 3), 16)\n    g = parseInt(color.slice(3, 5), 16)\n    b = parseInt(color.slice(5, 7), 16)\n  } else {\n    r = parseInt(color.slice(1, 2), 16)\n    g = parseInt(color.slice(2, 3), 16)\n    b = parseInt(color.slice(3, 5), 16)\n  }\n\n  return `rgba(${r}, ${g}, ${b})`\n}\n\nexport default hexToRgb\n"],"mappings":"AAAA;;;;;AAKG;AAEH;AACM,IAAAA,QAAQ,GAAG,SAAAA,CAACC,KAAa;EAC7B,IAAI,OAAOA,KAAK,KAAK,WAAW,EAAE;IAChC,MAAM,IAAIC,SAAS,CAAC,0BAA0B,CAAC;EAChD;EAEWD,KAAK,CAACE,KAAK,CAAC,0BAA0B;EAMlD,IAAIC,CAAC;EACL,IAAIC,CAAC;EACL,IAAIC,CAAC;EAEL,IAAIL,KAAK,CAACM,MAAM,KAAK,CAAC,EAAE;IACtBH,CAAC,GAAGI,QAAQ,CAACP,KAAK,CAACQ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IACnCJ,CAAC,GAAGG,QAAQ,CAACP,KAAK,CAACQ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IACnCH,CAAC,GAAGE,QAAQ,CAACP,KAAK,CAACQ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EACpC,OAAM;IACLL,CAAC,GAAGI,QAAQ,CAACP,KAAK,CAACQ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IACnCJ,CAAC,GAAGG,QAAQ,CAACP,KAAK,CAACQ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IACnCH,CAAC,GAAGE,QAAQ,CAACP,KAAK,CAACQ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EACpC;EAED,OAAO,QAAAC,MAAA,CAAQN,CAAC,QAAAM,MAAA,CAAKL,CAAC,EAAK,MAAAK,MAAA,CAAAJ,CAAC,MAAG;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}