openapi: 3.0.1
info:
  title: WebRecipes API
  description: 'API for managing recipes, categories, comments, and users.'
  version: v1
paths:
  /api/Category:
    get:
      tags:
        - Category
      summary: Retrieves all Categories
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      tags:
        - Category
      summary: Creates a category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CategoryDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CategoryDto'
      responses:
        '201':
          description: Created
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/Category/{Catid}':
    get:
      tags:
        - Category
      summary: Retrieves a specific category by ID
      parameters:
        - name: Catid
          in: path
          description: The ID of the category to retrieve
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Category'
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
            text/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/Category/{categoryId}':
    put:
      tags:
        - Category
      summary: Updates a specific category by ID
      parameters:
        - name: categoryId
          in: path
          description: The ID of the category to update
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CategoryDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CategoryDto'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Category
      summary: Deletes a specific category by ID
      parameters:
        - name: categoryId
          in: path
          description: The ID of the category to delete
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/Comment:
    get:
      tags:
        - Comment
      summary: Retrieves All comments
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      tags:
        - Comment
      summary: Creates a Comment
      parameters:
        - name: userId
          in: query
          description: The ID of the user who wrote the comment
          style: form
          schema:
            type: integer
            format: int32
        - name: recipeId
          in: query
          description: The ID of the recipe that the comment ios written on
          style: form
          schema:
            type: integer
            format: int32
      requestBody:
        description: The body ofg the comment in .json format
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CommentDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CommentDto'
      responses:
        '201':
          description: Created
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/Comment/{id}':
    get:
      tags:
        - Comment
      summary: Retrieves a specific comment by ID
      parameters:
        - name: id
          in: path
          description: The ID of the comment to retrieve
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Comment'
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
            text/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/Comment/{commentId}':
    put:
      tags:
        - Comment
      summary: Updates a specific comment by ID
      parameters:
        - name: commentId
          in: path
          description: The ID of the comment to update
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CommentDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CommentDto'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Comment
      summary: Deletes a specific comment by ID
      parameters:
        - name: commentId
          in: path
          description: The ID of the comment to delete
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/Recipe:
    get:
      tags:
        - Recipe
      summary: Retrieves all Recipes
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
    post:
      tags:
        - Recipe
      summary: Creates a recipe
      parameters:
        - name: categoryId
          in: query
          description: The category that will specify the recipe
          style: form
          schema:
            type: integer
            format: int32
        - name: userId
          in: query
          description: The ID of the user who is creating the recipe
          style: form
          schema:
            type: integer
            format: int32
      requestBody:
        description: The body of the recipe in a .json format
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeDto'
          text/json:
            schema:
              $ref: '#/components/schemas/RecipeDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RecipeDto'
      responses:
        '201':
          description: Created
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/Recipe/{id}':
    get:
      tags:
        - Recipe
      summary: retrieves a specific recipe by ID
      parameters:
        - name: id
          in: path
          description: The ID of the recipe to retrieve
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Recipe'
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
            text/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/Recipe/{recipeId}':
    put:
      tags:
        - Recipe
      summary: Updates a specific recipe by ID
      parameters:
        - name: recipeId
          in: path
          description: The ID of the recipe to update
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeDto'
          text/json:
            schema:
              $ref: '#/components/schemas/RecipeDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RecipeDto'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Recipe
      summary: Deletes a specific recipe by ID
      parameters:
        - name: recipeId
          in: path
          description: The ID of the recipe to delete
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/User:
    get:
      tags:
        - User
      summary: Retrieves all the users
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - User
      summary: Creates a User
      requestBody:
        description: The body of the user entity in .json format
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UserDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '201':
          description: Created
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/User/{id}':
    get:
      tags:
        - User
      summary: Retrieves a specific user by ID
      parameters:
        - name: id
          in: path
          description: The ID of the user to retrieve
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/User/{userId}':
    put:
      tags:
        - User
      summary: Updates a specific user by ID
      parameters:
        - name: userId
          in: path
          description: The ID of the user to update
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UserDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - User
      summary: Deletes a specific user by ID
      parameters:
        - name: userId
          in: path
          description: The ID of the user to delete
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
components:
  schemas:
    Category:
      type: object
      properties:
        id_Kategorija:
          type: integer
          format: int32
        pavadinimas:
          type: string
          nullable: true
        receptuKategorijos:
          type: array
          items:
            $ref: '#/components/schemas/RecipeCategory'
          nullable: true
      additionalProperties: false
    CategoryDto:
      type: object
      properties:
        id_Kategorija:
          type: integer
          format: int32
        pavadinimas:
          type: string
          nullable: true
      additionalProperties: false
    Comment:
      type: object
      properties:
        id_Komentaras:
          type: integer
          format: int32
        patiktukai:
          type: integer
          format: int32
        sukurimo_data:
          type: string
          format: date-time
        tekstas:
          type: string
          nullable: true
        userid_Vartotojas:
          type: integer
          format: int32
        recipeid_Receptas:
          type: integer
          format: int32
        recipe:
          $ref: '#/components/schemas/Recipe'
        user:
          $ref: '#/components/schemas/User'
      additionalProperties: false
    CommentDto:
      type: object
      properties:
        id_Komentaras:
          type: integer
          format: int32
        patiktukai:
          type: integer
          format: int32
        sukurimo_data:
          type: string
          format: date-time
        tekstas:
          type: string
          nullable: true
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: { }
    Recipe:
      type: object
      properties:
        id_Receptas:
          type: integer
          format: int32
        pavadinimas:
          type: string
          nullable: true
        tekstas:
          type: string
          nullable: true
        instrukcija:
          type: string
          nullable: true
        user:
          $ref: '#/components/schemas/User'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
          nullable: true
        receptuKategorijos:
          type: array
          items:
            $ref: '#/components/schemas/RecipeCategory'
          nullable: true
      additionalProperties: false
    RecipeCategory:
      type: object
      properties:
        recipeId:
          type: integer
          format: int32
        categoryId:
          type: integer
          format: int32
        recipe:
          $ref: '#/components/schemas/Recipe'
        category:
          $ref: '#/components/schemas/Category'
      additionalProperties: false
    RecipeDto:
      type: object
      properties:
        id_Receptas:
          type: integer
          format: int32
        pavadinimas:
          type: string
          nullable: true
        tekstas:
          type: string
          nullable: true
        instrukcija:
          type: string
          nullable: true
      additionalProperties: false
    User:
      type: object
      properties:
        id_Vartotojas:
          type: integer
          format: int32
        vardas:
          type: string
          nullable: true
        pavarde:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        telefonas:
          type: string
          nullable: true
        role:
          type: integer
          format: int32
        recipes:
          type: array
          items:
            $ref: '#/components/schemas/Recipe'
          nullable: true
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
          nullable: true
      additionalProperties: false
    UserDto:
      type: object
      properties:
        id_Vartotojas:
          type: integer
          format: int32
        vardas:
          type: string
          nullable: true
        pavarde:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        telefonas:
          type: string
          nullable: true
        role:
          type: integer
          format: int32
      additionalProperties: false